/**
 * 长管用户
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  */
export type ParamsBodyaddUsingPOST2 = models.SysRole;
/**
  * @description allocatedListUsingGET参数
  * @property `[admin]` 
  * @property `[avatar]` 头像地址
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_ancestors]` 祖级列表
  * @property `[dept_createBy]` 创建者
  * @property `[dept_createTime]` 创建时间
  * @property `[dept_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_deptId]` 部门id
  * @property `[dept_deptName]` 部门名称
  * @property `[dept_email]` 邮箱
  * @property `[dept_leaderId]` 负责人
  * @property `[dept_orderNum]` 显示顺序
  * @property `[dept_parentId]` 父部门id
  * @property `[dept_parentName]` 父部门名称
  * @property `[dept_phone]` 联系电话
  * @property `[dept_status]` 部门状态（0正常 1停用）
  * @property `[dept_updateBy]` 更新者
  * @property `[dept_updateTime]` 更新时间
  * @property `[deptId]` 部门ID
  * @property `[email]` 用户邮箱
  * @property `[loginDate]` 最后登录时间
  * @property `[loginIp]` 最后登录IP
  * @property `[nickName]` 用户名称
  * @property `[password]` 密码
  * @property `[phonenumber]` 手机号码
  * @property `[remark]` 备注
  * @property `[roleId]` 
  * @property `[roleIds]` 
  * @property `[roles_0_admin]` 
  * @property `[roles_0_createBy]` 创建者
  * @property `[roles_0_createTime]` 创建时间
  * @property `[roles_0_dataScope]` 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  * @property `[roles_0_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[roles_0_deptCheckStrictly]` 部门树选择项是否关联显示
  * @property `[roles_0_deptIds]` 
  * @property `[roles_0_flag]` 
  * @property `[roles_0_menuCheckStrictly]` 菜单树选择项是否关联显示
  * @property `[roles_0_menuIds]` 
  * @property `[roles_0_permissions]` 
  * @property `[roles_0_remark]` 备注
  * @property `[roles_0_roleId]` 角色ID
  * @property `[roles_0_roleKey]` 角色编码
  * @property `[roles_0_roleName]` 角色名称
  * @property `[roles_0_roleSort]` 显示顺序
  * @property `[roles_0_status]` 角色状态（0正常 1停用）
  * @property `[roles_0_updateBy]` 更新者
  * @property `[roles_0_updateTime]` 更新时间
  * @property `[sex]` 用户性别（0男 1女 2未知）
  * @property `[status]` 帐号状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  * @property `[userId]` 用户ID
  * @property `[userName]` 用户账号
  * @property `[userType]` 用户类型（00系统用户）
  */
export interface ParamsallocatedListUsingGET {
  // queryParams
  /**
   * 
   */
  admin?: string;
  /**
   * 头像地址
   */
  avatar?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 祖级列表
   */
  dept_ancestors?: string;
  /**
   * 创建者
   */
  dept_createBy?: string;
  /**
   * 创建时间
   */
  dept_createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  dept_delFlag?: string;
  /**
   * 部门id
   */
  dept_deptId?: number;
  /**
   * 部门名称
   */
  dept_deptName?: string;
  /**
   * 邮箱
   */
  dept_email?: string;
  /**
   * 负责人
   */
  dept_leaderId?: number;
  /**
   * 显示顺序
   */
  dept_orderNum?: number;
  /**
   * 父部门id
   */
  dept_parentId?: number;
  /**
   * 父部门名称
   */
  dept_parentName?: string;
  /**
   * 联系电话
   */
  dept_phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  dept_status?: string;
  /**
   * 更新者
   */
  dept_updateBy?: string;
  /**
   * 更新时间
   */
  dept_updateTime?: string;
  /**
   * 部门ID
   */
  deptId?: number;
  /**
   * 用户邮箱
   */
  email?: string;
  /**
   * 最后登录时间
   */
  loginDate?: string;
  /**
   * 最后登录IP
   */
  loginIp?: string;
  /**
   * 用户名称
   */
  nickName?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 手机号码
   */
  phonenumber?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 
   */
  roleId?: number;
  /**
   * 
   */
  roleIds?: Array<string>;
  /**
   * 
   */
  roles_0_admin?: string;
  /**
   * 创建者
   */
  roles_0_createBy?: string;
  /**
   * 创建时间
   */
  roles_0_createTime?: string;
  /**
   * 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
   */
  roles_0_dataScope?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  roles_0_delFlag?: string;
  /**
   * 部门树选择项是否关联显示
   */
  roles_0_deptCheckStrictly?: string;
  /**
   * 
   */
  roles_0_deptIds?: Array<string>;
  /**
   * 
   */
  roles_0_flag?: string;
  /**
   * 菜单树选择项是否关联显示
   */
  roles_0_menuCheckStrictly?: string;
  /**
   * 
   */
  roles_0_menuIds?: Array<string>;
  /**
   * 
   */
  roles_0_permissions?: Array<string>;
  /**
   * 备注
   */
  roles_0_remark?: string;
  /**
   * 角色ID
   */
  roles_0_roleId?: number;
  /**
   * 角色编码
   */
  roles_0_roleKey?: string;
  /**
   * 角色名称
   */
  roles_0_roleName?: string;
  /**
   * 显示顺序
   */
  roles_0_roleSort?: number;
  /**
   * 角色状态（0正常 1停用）
   */
  roles_0_status?: string;
  /**
   * 更新者
   */
  roles_0_updateBy?: string;
  /**
   * 更新时间
   */
  roles_0_updateTime?: string;
  /**
   * 用户性别（0男 1女 2未知）
   */
  sex?: string;
  /**
   * 帐号状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 用户账号
   */
  userName?: string;
  /**
   * 用户类型（00系统用户）
   */
  userType?: string;
}
/**
  * @description cancelAuthUserAllUsingPUT参数
  * @property `[roleId]` roleId
  * @property `[userIds]` userIds
  */
export interface ParamscancelAuthUserAllUsingPUT {
  // queryParams
  /**
   * roleId
   */
  roleId?: number;
  /**
   * userIds
   */
  userIds?: Array<string>;
}
/**
  */
export type ParamsBodycancelAuthUserUsingPUT = models.SysUserRole;
/**
  */
export type ParamsBodychangeStatusUsingPUT = models.SysRole;
/**
  */
export type ParamsBodydataScopeUsingPUT = models.SysRole;
/**
  * @description deptTreeUsingGET参数
  * @property `roleId` roleId
  */
export interface ParamsdeptTreeUsingGET {
  // pathParams
  /**
   * roleId
   */
  roleId: number;
}
/**
  */
export type ParamsBodyeditUsingPUT2 = models.SysRole;
/**
  * @description getInfoUsingGET2参数
  * @property `roleId` roleId
  */
export interface ParamsgetInfoUsingGET2 {
  // pathParams
  /**
   * roleId
   */
  roleId: number;
}
/**
  * @description listUsingGET2参数
  * @property `[admin]` 
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[dataScope]` 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[deptCheckStrictly]` 部门树选择项是否关联显示
  * @property `[deptIds]` 
  * @property `[flag]` 
  * @property `[menuCheckStrictly]` 菜单树选择项是否关联显示
  * @property `[menuIds]` 
  * @property `[permissions]` 
  * @property `[remark]` 备注
  * @property `[roleId]` 角色ID
  * @property `[roleKey]` 角色编码
  * @property `[roleName]` 角色名称
  * @property `[roleSort]` 显示顺序
  * @property `[status]` 角色状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  */
export interface ParamslistUsingGET2 {
  // queryParams
  /**
   * 
   */
  admin?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
   */
  dataScope?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 部门树选择项是否关联显示
   */
  deptCheckStrictly?: string;
  /**
   * 
   */
  deptIds?: Array<string>;
  /**
   * 
   */
  flag?: string;
  /**
   * 菜单树选择项是否关联显示
   */
  menuCheckStrictly?: string;
  /**
   * 
   */
  menuIds?: Array<string>;
  /**
   * 
   */
  permissions?: Array<string>;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 角色ID
   */
  roleId?: number;
  /**
   * 角色编码
   */
  roleKey?: string;
  /**
   * 角色名称
   */
  roleName?: string;
  /**
   * 显示顺序
   */
  roleSort?: number;
  /**
   * 角色状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
}
/**
  * @description removeUsingDELETE2参数
  * @property `roleIds` roleIds
  */
export interface ParamsremoveUsingDELETE2 {
  // pathParams
  /**
   * roleIds
   */
  roleIds: string;
}
/**
  * @description selectAuthUserAllUsingPUT参数
  * @property `[roleId]` roleId
  * @property `[userIds]` userIds
  */
export interface ParamsselectAuthUserAllUsingPUT {
  // queryParams
  /**
   * roleId
   */
  roleId?: number;
  /**
   * userIds
   */
  userIds?: Array<string>;
}
/**
  * @description unallocatedListUsingGET参数
  * @property `[admin]` 
  * @property `[avatar]` 头像地址
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_ancestors]` 祖级列表
  * @property `[dept_createBy]` 创建者
  * @property `[dept_createTime]` 创建时间
  * @property `[dept_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_deptId]` 部门id
  * @property `[dept_deptName]` 部门名称
  * @property `[dept_email]` 邮箱
  * @property `[dept_leaderId]` 负责人
  * @property `[dept_orderNum]` 显示顺序
  * @property `[dept_parentId]` 父部门id
  * @property `[dept_parentName]` 父部门名称
  * @property `[dept_phone]` 联系电话
  * @property `[dept_status]` 部门状态（0正常 1停用）
  * @property `[dept_updateBy]` 更新者
  * @property `[dept_updateTime]` 更新时间
  * @property `[deptId]` 部门ID
  * @property `[email]` 用户邮箱
  * @property `[loginDate]` 最后登录时间
  * @property `[loginIp]` 最后登录IP
  * @property `[nickName]` 用户名称
  * @property `[password]` 密码
  * @property `[phonenumber]` 手机号码
  * @property `[remark]` 备注
  * @property `[roleId]` 
  * @property `[roleIds]` 
  * @property `[roles_0_admin]` 
  * @property `[roles_0_createBy]` 创建者
  * @property `[roles_0_createTime]` 创建时间
  * @property `[roles_0_dataScope]` 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  * @property `[roles_0_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[roles_0_deptCheckStrictly]` 部门树选择项是否关联显示
  * @property `[roles_0_deptIds]` 
  * @property `[roles_0_flag]` 
  * @property `[roles_0_menuCheckStrictly]` 菜单树选择项是否关联显示
  * @property `[roles_0_menuIds]` 
  * @property `[roles_0_permissions]` 
  * @property `[roles_0_remark]` 备注
  * @property `[roles_0_roleId]` 角色ID
  * @property `[roles_0_roleKey]` 角色编码
  * @property `[roles_0_roleName]` 角色名称
  * @property `[roles_0_roleSort]` 显示顺序
  * @property `[roles_0_status]` 角色状态（0正常 1停用）
  * @property `[roles_0_updateBy]` 更新者
  * @property `[roles_0_updateTime]` 更新时间
  * @property `[sex]` 用户性别（0男 1女 2未知）
  * @property `[status]` 帐号状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  * @property `[userId]` 用户ID
  * @property `[userName]` 用户账号
  * @property `[userType]` 用户类型（00系统用户）
  */
export interface ParamsunallocatedListUsingGET {
  // queryParams
  /**
   * 
   */
  admin?: string;
  /**
   * 头像地址
   */
  avatar?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 祖级列表
   */
  dept_ancestors?: string;
  /**
   * 创建者
   */
  dept_createBy?: string;
  /**
   * 创建时间
   */
  dept_createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  dept_delFlag?: string;
  /**
   * 部门id
   */
  dept_deptId?: number;
  /**
   * 部门名称
   */
  dept_deptName?: string;
  /**
   * 邮箱
   */
  dept_email?: string;
  /**
   * 负责人
   */
  dept_leaderId?: number;
  /**
   * 显示顺序
   */
  dept_orderNum?: number;
  /**
   * 父部门id
   */
  dept_parentId?: number;
  /**
   * 父部门名称
   */
  dept_parentName?: string;
  /**
   * 联系电话
   */
  dept_phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  dept_status?: string;
  /**
   * 更新者
   */
  dept_updateBy?: string;
  /**
   * 更新时间
   */
  dept_updateTime?: string;
  /**
   * 部门ID
   */
  deptId?: number;
  /**
   * 用户邮箱
   */
  email?: string;
  /**
   * 最后登录时间
   */
  loginDate?: string;
  /**
   * 最后登录IP
   */
  loginIp?: string;
  /**
   * 用户名称
   */
  nickName?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 手机号码
   */
  phonenumber?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 
   */
  roleId?: number;
  /**
   * 
   */
  roleIds?: Array<string>;
  /**
   * 
   */
  roles_0_admin?: string;
  /**
   * 创建者
   */
  roles_0_createBy?: string;
  /**
   * 创建时间
   */
  roles_0_createTime?: string;
  /**
   * 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
   */
  roles_0_dataScope?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  roles_0_delFlag?: string;
  /**
   * 部门树选择项是否关联显示
   */
  roles_0_deptCheckStrictly?: string;
  /**
   * 
   */
  roles_0_deptIds?: Array<string>;
  /**
   * 
   */
  roles_0_flag?: string;
  /**
   * 菜单树选择项是否关联显示
   */
  roles_0_menuCheckStrictly?: string;
  /**
   * 
   */
  roles_0_menuIds?: Array<string>;
  /**
   * 
   */
  roles_0_permissions?: Array<string>;
  /**
   * 备注
   */
  roles_0_remark?: string;
  /**
   * 角色ID
   */
  roles_0_roleId?: number;
  /**
   * 角色编码
   */
  roles_0_roleKey?: string;
  /**
   * 角色名称
   */
  roles_0_roleName?: string;
  /**
   * 显示顺序
   */
  roles_0_roleSort?: number;
  /**
   * 角色状态（0正常 1停用）
   */
  roles_0_status?: string;
  /**
   * 更新者
   */
  roles_0_updateBy?: string;
  /**
   * 更新时间
   */
  roles_0_updateTime?: string;
  /**
   * 用户性别（0男 1女 2未知）
   */
  sex?: string;
  /**
   * 帐号状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 用户账号
   */
  userName?: string;
  /**
   * 用户类型（00系统用户）
   */
  userType?: string;
}

export class SysRoleControllerApi {
  protected $basePath = ''.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary add
   
   * @param data: ParamsBodyaddUsingPOST2
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public addUsingPOST2 = (
    
    data: ParamsBodyaddUsingPOST2,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary allocatedList
   * @param params ParamsallocatedListUsingGET
   
   * @param opt ajax config
   * @returns models.TableDataInfo
   */
  public allocatedListUsingGET = (
    params: ParamsallocatedListUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.TableDataInfo>  => {
    const url = this.$basePath + `/role/authUser/allocatedList`;
    const p: any = {};
    p.query = {};
    if ('admin' in params) p.query.admin = params.admin;
    if ('avatar' in params) p.query.avatar = params.avatar;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('dept_ancestors' in params) p.query.dept_ancestors = params.dept_ancestors;
    if ('dept_createBy' in params) p.query.dept_createBy = params.dept_createBy;
    if ('dept_createTime' in params) p.query.dept_createTime = params.dept_createTime;
    if ('dept_delFlag' in params) p.query.dept_delFlag = params.dept_delFlag;
    if ('dept_deptId' in params) p.query.dept_deptId = params.dept_deptId;
    if ('dept_deptName' in params) p.query.dept_deptName = params.dept_deptName;
    if ('dept_email' in params) p.query.dept_email = params.dept_email;
    if ('dept_leaderId' in params) p.query.dept_leaderId = params.dept_leaderId;
    if ('dept_orderNum' in params) p.query.dept_orderNum = params.dept_orderNum;
    if ('dept_parentId' in params) p.query.dept_parentId = params.dept_parentId;
    if ('dept_parentName' in params) p.query.dept_parentName = params.dept_parentName;
    if ('dept_phone' in params) p.query.dept_phone = params.dept_phone;
    if ('dept_status' in params) p.query.dept_status = params.dept_status;
    if ('dept_updateBy' in params) p.query.dept_updateBy = params.dept_updateBy;
    if ('dept_updateTime' in params) p.query.dept_updateTime = params.dept_updateTime;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('email' in params) p.query.email = params.email;
    if ('loginDate' in params) p.query.loginDate = params.loginDate;
    if ('loginIp' in params) p.query.loginIp = params.loginIp;
    if ('nickName' in params) p.query.nickName = params.nickName;
    if ('password' in params) p.query.password = params.password;
    if ('phonenumber' in params) p.query.phonenumber = params.phonenumber;
    if ('remark' in params) p.query.remark = params.remark;
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('roleIds' in params) p.query.roleIds = params.roleIds;
    if ('roles_0_admin' in params) p.query.roles_0_admin = params.roles_0_admin;
    if ('roles_0_createBy' in params) p.query.roles_0_createBy = params.roles_0_createBy;
    if ('roles_0_createTime' in params) p.query.roles_0_createTime = params.roles_0_createTime;
    if ('roles_0_dataScope' in params) p.query.roles_0_dataScope = params.roles_0_dataScope;
    if ('roles_0_delFlag' in params) p.query.roles_0_delFlag = params.roles_0_delFlag;
    if ('roles_0_deptCheckStrictly' in params) p.query.roles_0_deptCheckStrictly = params.roles_0_deptCheckStrictly;
    if ('roles_0_deptIds' in params) p.query.roles_0_deptIds = params.roles_0_deptIds;
    if ('roles_0_flag' in params) p.query.roles_0_flag = params.roles_0_flag;
    if ('roles_0_menuCheckStrictly' in params) p.query.roles_0_menuCheckStrictly = params.roles_0_menuCheckStrictly;
    if ('roles_0_menuIds' in params) p.query.roles_0_menuIds = params.roles_0_menuIds;
    if ('roles_0_permissions' in params) p.query.roles_0_permissions = params.roles_0_permissions;
    if ('roles_0_remark' in params) p.query.roles_0_remark = params.roles_0_remark;
    if ('roles_0_roleId' in params) p.query.roles_0_roleId = params.roles_0_roleId;
    if ('roles_0_roleKey' in params) p.query.roles_0_roleKey = params.roles_0_roleKey;
    if ('roles_0_roleName' in params) p.query.roles_0_roleName = params.roles_0_roleName;
    if ('roles_0_roleSort' in params) p.query.roles_0_roleSort = params.roles_0_roleSort;
    if ('roles_0_status' in params) p.query.roles_0_status = params.roles_0_status;
    if ('roles_0_updateBy' in params) p.query.roles_0_updateBy = params.roles_0_updateBy;
    if ('roles_0_updateTime' in params) p.query.roles_0_updateTime = params.roles_0_updateTime;
    if ('sex' in params) p.query.sex = params.sex;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    if ('userId' in params) p.query.userId = params.userId;
    if ('userName' in params) p.query.userName = params.userName;
    if ('userType' in params) p.query.userType = params.userType;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary cancelAuthUserAll
   * @param params ParamscancelAuthUserAllUsingPUT
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public cancelAuthUserAllUsingPUT = (
    params: ParamscancelAuthUserAllUsingPUT,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/authUser/cancelAll`;
    const p: any = {};
    p.query = {};
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('userIds' in params) p.query.userIds = params.userIds;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary cancelAuthUser
   
   * @param data: ParamsBodycancelAuthUserUsingPUT
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public cancelAuthUserUsingPUT = (
    
    data: ParamsBodycancelAuthUserUsingPUT,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/authUser/cancel`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary changeStatus
   
   * @param data: ParamsBodychangeStatusUsingPUT
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public changeStatusUsingPUT = (
    
    data: ParamsBodychangeStatusUsingPUT,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/changeStatus`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary dataScope
   
   * @param data: ParamsBodydataScopeUsingPUT
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public dataScopeUsingPUT = (
    
    data: ParamsBodydataScopeUsingPUT,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/dataScope`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary deptTree
   * @param params ParamsdeptTreeUsingGET
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public deptTreeUsingGET = (
    params: ParamsdeptTreeUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    roleId,
} = params;
    const url = this.$basePath + `/role/deptTree/${roleId}`;
    const p: any = {};
    ajax.check(params.roleId, 'roleId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary edit
   
   * @param data: ParamsBodyeditUsingPUT2
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public editUsingPUT2 = (
    
    data: ParamsBodyeditUsingPUT2,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary getInfo
   * @param params ParamsgetInfoUsingGET2
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public getInfoUsingGET2 = (
    params: ParamsgetInfoUsingGET2,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    roleId,
} = params;
    const url = this.$basePath + `/role/${roleId}`;
    const p: any = {};
    ajax.check(params.roleId, 'roleId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary list
   * @param params ParamslistUsingGET2
   
   * @param opt ajax config
   * @returns models.TableDataInfo
   */
  public listUsingGET2 = (
    params: ParamslistUsingGET2,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.TableDataInfo>  => {
    const url = this.$basePath + `/role/list`;
    const p: any = {};
    p.query = {};
    if ('admin' in params) p.query.admin = params.admin;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('dataScope' in params) p.query.dataScope = params.dataScope;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('deptCheckStrictly' in params) p.query.deptCheckStrictly = params.deptCheckStrictly;
    if ('deptIds' in params) p.query.deptIds = params.deptIds;
    if ('flag' in params) p.query.flag = params.flag;
    if ('menuCheckStrictly' in params) p.query.menuCheckStrictly = params.menuCheckStrictly;
    if ('menuIds' in params) p.query.menuIds = params.menuIds;
    if ('permissions' in params) p.query.permissions = params.permissions;
    if ('remark' in params) p.query.remark = params.remark;
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('roleKey' in params) p.query.roleKey = params.roleKey;
    if ('roleName' in params) p.query.roleName = params.roleName;
    if ('roleSort' in params) p.query.roleSort = params.roleSort;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary optionselect
   
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public optionselectUsingGET = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/optionselect`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary remove
   * @param params ParamsremoveUsingDELETE2
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public removeUsingDELETE2 = (
    params: ParamsremoveUsingDELETE2,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    roleIds,
} = params;
    const url = this.$basePath + `/role/${roleIds}`;
    const p: any = {};
    ajax.check(params.roleIds, 'roleIds');
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary selectAuthUserAll
   * @param params ParamsselectAuthUserAllUsingPUT
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public selectAuthUserAllUsingPUT = (
    params: ParamsselectAuthUserAllUsingPUT,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/role/authUser/selectAll`;
    const p: any = {};
    p.query = {};
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('userIds' in params) p.query.userIds = params.userIds;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary unallocatedList
   * @param params ParamsunallocatedListUsingGET
   
   * @param opt ajax config
   * @returns models.TableDataInfo
   */
  public unallocatedListUsingGET = (
    params: ParamsunallocatedListUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.TableDataInfo>  => {
    const url = this.$basePath + `/role/authUser/unallocatedList`;
    const p: any = {};
    p.query = {};
    if ('admin' in params) p.query.admin = params.admin;
    if ('avatar' in params) p.query.avatar = params.avatar;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('dept_ancestors' in params) p.query.dept_ancestors = params.dept_ancestors;
    if ('dept_createBy' in params) p.query.dept_createBy = params.dept_createBy;
    if ('dept_createTime' in params) p.query.dept_createTime = params.dept_createTime;
    if ('dept_delFlag' in params) p.query.dept_delFlag = params.dept_delFlag;
    if ('dept_deptId' in params) p.query.dept_deptId = params.dept_deptId;
    if ('dept_deptName' in params) p.query.dept_deptName = params.dept_deptName;
    if ('dept_email' in params) p.query.dept_email = params.dept_email;
    if ('dept_leaderId' in params) p.query.dept_leaderId = params.dept_leaderId;
    if ('dept_orderNum' in params) p.query.dept_orderNum = params.dept_orderNum;
    if ('dept_parentId' in params) p.query.dept_parentId = params.dept_parentId;
    if ('dept_parentName' in params) p.query.dept_parentName = params.dept_parentName;
    if ('dept_phone' in params) p.query.dept_phone = params.dept_phone;
    if ('dept_status' in params) p.query.dept_status = params.dept_status;
    if ('dept_updateBy' in params) p.query.dept_updateBy = params.dept_updateBy;
    if ('dept_updateTime' in params) p.query.dept_updateTime = params.dept_updateTime;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('email' in params) p.query.email = params.email;
    if ('loginDate' in params) p.query.loginDate = params.loginDate;
    if ('loginIp' in params) p.query.loginIp = params.loginIp;
    if ('nickName' in params) p.query.nickName = params.nickName;
    if ('password' in params) p.query.password = params.password;
    if ('phonenumber' in params) p.query.phonenumber = params.phonenumber;
    if ('remark' in params) p.query.remark = params.remark;
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('roleIds' in params) p.query.roleIds = params.roleIds;
    if ('roles_0_admin' in params) p.query.roles_0_admin = params.roles_0_admin;
    if ('roles_0_createBy' in params) p.query.roles_0_createBy = params.roles_0_createBy;
    if ('roles_0_createTime' in params) p.query.roles_0_createTime = params.roles_0_createTime;
    if ('roles_0_dataScope' in params) p.query.roles_0_dataScope = params.roles_0_dataScope;
    if ('roles_0_delFlag' in params) p.query.roles_0_delFlag = params.roles_0_delFlag;
    if ('roles_0_deptCheckStrictly' in params) p.query.roles_0_deptCheckStrictly = params.roles_0_deptCheckStrictly;
    if ('roles_0_deptIds' in params) p.query.roles_0_deptIds = params.roles_0_deptIds;
    if ('roles_0_flag' in params) p.query.roles_0_flag = params.roles_0_flag;
    if ('roles_0_menuCheckStrictly' in params) p.query.roles_0_menuCheckStrictly = params.roles_0_menuCheckStrictly;
    if ('roles_0_menuIds' in params) p.query.roles_0_menuIds = params.roles_0_menuIds;
    if ('roles_0_permissions' in params) p.query.roles_0_permissions = params.roles_0_permissions;
    if ('roles_0_remark' in params) p.query.roles_0_remark = params.roles_0_remark;
    if ('roles_0_roleId' in params) p.query.roles_0_roleId = params.roles_0_roleId;
    if ('roles_0_roleKey' in params) p.query.roles_0_roleKey = params.roles_0_roleKey;
    if ('roles_0_roleName' in params) p.query.roles_0_roleName = params.roles_0_roleName;
    if ('roles_0_roleSort' in params) p.query.roles_0_roleSort = params.roles_0_roleSort;
    if ('roles_0_status' in params) p.query.roles_0_status = params.roles_0_status;
    if ('roles_0_updateBy' in params) p.query.roles_0_updateBy = params.roles_0_updateBy;
    if ('roles_0_updateTime' in params) p.query.roles_0_updateTime = params.roles_0_updateTime;
    if ('sex' in params) p.query.sex = params.sex;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    if ('userId' in params) p.query.userId = params.userId;
    if ('userName' in params) p.query.userName = params.userName;
    if ('userType' in params) p.query.userType = params.userType;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
}

export default new SysRoleControllerApi();