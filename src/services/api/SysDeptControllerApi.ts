/**
 * 长管用户
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  */
export type ParamsBodyaddUsingPOST = models.SysDept;
/**
  */
export type ParamsBodyeditUsingPUT = models.SysDept;
/**
  * @description excludeChildUsingGET参数
  * @property `deptId` deptId
  */
export interface ParamsexcludeChildUsingGET {
  // pathParams
  /**
   * deptId
   */
  deptId: number;
}
/**
  * @description getInfoUsingGET参数
  * @property `deptId` deptId
  */
export interface ParamsgetInfoUsingGET {
  // pathParams
  /**
   * deptId
   */
  deptId: number;
}
/**
  * @description listUsingGET参数
  * @property `[ancestors]` 祖级列表
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[deptId]` 部门id
  * @property `[deptName]` 部门名称
  * @property `[email]` 邮箱
  * @property `[leaderId]` 负责人
  * @property `[orderNum]` 显示顺序
  * @property `[parentId]` 父部门id
  * @property `[parentName]` 父部门名称
  * @property `[phone]` 联系电话
  * @property `[status]` 部门状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  */
export interface ParamslistUsingGET {
  // queryParams
  /**
   * 祖级列表
   */
  ancestors?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 部门id
   */
  deptId?: number;
  /**
   * 部门名称
   */
  deptName?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 负责人
   */
  leaderId?: number;
  /**
   * 显示顺序
   */
  orderNum?: number;
  /**
   * 父部门id
   */
  parentId?: number;
  /**
   * 父部门名称
   */
  parentName?: string;
  /**
   * 联系电话
   */
  phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
}
/**
  * @description removeUsingDELETE参数
  * @property `deptId` deptId
  */
export interface ParamsremoveUsingDELETE {
  // pathParams
  /**
   * deptId
   */
  deptId: number;
}

export class SysDeptControllerApi {
  protected $basePath = ''.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary add
   
   * @param data: ParamsBodyaddUsingPOST
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public addUsingPOST = (
    
    data: ParamsBodyaddUsingPOST,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/dept`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary edit
   
   * @param data: ParamsBodyeditUsingPUT
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public editUsingPUT = (
    
    data: ParamsBodyeditUsingPUT,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/dept`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary excludeChild
   * @param params ParamsexcludeChildUsingGET
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public excludeChildUsingGET = (
    params: ParamsexcludeChildUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    deptId,
} = params;
    const url = this.$basePath + `/dept/list/exclude/${deptId}`;
    const p: any = {};
    ajax.check(params.deptId, 'deptId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary getInfo
   * @param params ParamsgetInfoUsingGET
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public getInfoUsingGET = (
    params: ParamsgetInfoUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    deptId,
} = params;
    const url = this.$basePath + `/dept/${deptId}`;
    const p: any = {};
    ajax.check(params.deptId, 'deptId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary list
   * @param params ParamslistUsingGET
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public listUsingGET = (
    params: ParamslistUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/dept/list`;
    const p: any = {};
    p.query = {};
    if ('ancestors' in params) p.query.ancestors = params.ancestors;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('deptName' in params) p.query.deptName = params.deptName;
    if ('email' in params) p.query.email = params.email;
    if ('leaderId' in params) p.query.leaderId = params.leaderId;
    if ('orderNum' in params) p.query.orderNum = params.orderNum;
    if ('parentId' in params) p.query.parentId = params.parentId;
    if ('parentName' in params) p.query.parentName = params.parentName;
    if ('phone' in params) p.query.phone = params.phone;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary remove
   * @param params ParamsremoveUsingDELETE
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public removeUsingDELETE = (
    params: ParamsremoveUsingDELETE,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    deptId,
} = params;
    const url = this.$basePath + `/dept/${deptId}`;
    const p: any = {};
    ajax.check(params.deptId, 'deptId');
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
}

export default new SysDeptControllerApi();