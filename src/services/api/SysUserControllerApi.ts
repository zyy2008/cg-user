/**
 * 长管用户
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  */
export type ParamsBodyaddUsingPOST3 = models.SysUserReq;
/**
  * @description authRoleUsingGET参数
  * @property `userId` userId
  */
export interface ParamsauthRoleUsingGET {
  // pathParams
  /**
   * userId
   */
  userId: number;
}
/**
  */
export type ParamsBodychangeStatusUsingPUT1 = models.SysUserReq;
/**
  * @description deptTreeUsingGET1参数
  * @property `[ancestors]` 祖级列表
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[deptId]` 部门id
  * @property `[deptName]` 部门名称
  * @property `[email]` 邮箱
  * @property `[leaderId]` 负责人
  * @property `[orderNum]` 显示顺序
  * @property `[parentId]` 父部门id
  * @property `[parentName]` 父部门名称
  * @property `[phone]` 联系电话
  * @property `[status]` 部门状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  */
export interface ParamsdeptTreeUsingGET1 {
  // queryParams
  /**
   * 祖级列表
   */
  ancestors?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 部门id
   */
  deptId?: number;
  /**
   * 部门名称
   */
  deptName?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 负责人
   */
  leaderId?: number;
  /**
   * 显示顺序
   */
  orderNum?: number;
  /**
   * 父部门id
   */
  parentId?: number;
  /**
   * 父部门名称
   */
  parentName?: string;
  /**
   * 联系电话
   */
  phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
}
/**
  */
export type ParamsBodyeditUsingPUT3 = models.SysUserReq;
/**
  * @description exportUsingPOST参数
  * @property `[admin]` 
  * @property `[avatar]` 头像地址
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_ancestors]` 祖级列表
  * @property `[dept_createBy]` 创建者
  * @property `[dept_createTime]` 创建时间
  * @property `[dept_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_deptId]` 部门id
  * @property `[dept_deptName]` 部门名称
  * @property `[dept_email]` 邮箱
  * @property `[dept_leaderId]` 负责人
  * @property `[dept_orderNum]` 显示顺序
  * @property `[dept_parentId]` 父部门id
  * @property `[dept_parentName]` 父部门名称
  * @property `[dept_phone]` 联系电话
  * @property `[dept_status]` 部门状态（0正常 1停用）
  * @property `[dept_updateBy]` 更新者
  * @property `[dept_updateTime]` 更新时间
  * @property `[deptId]` 部门ID
  * @property `[email]` 用户邮箱
  * @property `[loginDate]` 最后登录时间
  * @property `[loginIp]` 最后登录IP
  * @property `[nickName]` 用户名称
  * @property `[password]` 密码
  * @property `[phonenumber]` 手机号码
  * @property `[remark]` 备注
  * @property `[roleId]` 
  * @property `[roleIds]` 
  * @property `[roles_0_admin]` 
  * @property `[roles_0_createBy]` 创建者
  * @property `[roles_0_createTime]` 创建时间
  * @property `[roles_0_dataScope]` 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  * @property `[roles_0_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[roles_0_deptCheckStrictly]` 部门树选择项是否关联显示
  * @property `[roles_0_deptIds]` 
  * @property `[roles_0_flag]` 
  * @property `[roles_0_menuCheckStrictly]` 菜单树选择项是否关联显示
  * @property `[roles_0_menuIds]` 
  * @property `[roles_0_permissions]` 
  * @property `[roles_0_remark]` 备注
  * @property `[roles_0_roleId]` 角色ID
  * @property `[roles_0_roleKey]` 角色编码
  * @property `[roles_0_roleName]` 角色名称
  * @property `[roles_0_roleSort]` 显示顺序
  * @property `[roles_0_status]` 角色状态（0正常 1停用）
  * @property `[roles_0_updateBy]` 更新者
  * @property `[roles_0_updateTime]` 更新时间
  * @property `[sex]` 用户性别（0男 1女 2未知）
  * @property `[status]` 帐号状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  * @property `[userId]` 用户ID
  * @property `[userName]` 用户账号
  * @property `[userType]` 用户类型（00系统用户）
  */
export interface ParamsexportUsingPOST {
  // queryParams
  /**
   * 
   */
  admin?: string;
  /**
   * 头像地址
   */
  avatar?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 祖级列表
   */
  dept_ancestors?: string;
  /**
   * 创建者
   */
  dept_createBy?: string;
  /**
   * 创建时间
   */
  dept_createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  dept_delFlag?: string;
  /**
   * 部门id
   */
  dept_deptId?: number;
  /**
   * 部门名称
   */
  dept_deptName?: string;
  /**
   * 邮箱
   */
  dept_email?: string;
  /**
   * 负责人
   */
  dept_leaderId?: number;
  /**
   * 显示顺序
   */
  dept_orderNum?: number;
  /**
   * 父部门id
   */
  dept_parentId?: number;
  /**
   * 父部门名称
   */
  dept_parentName?: string;
  /**
   * 联系电话
   */
  dept_phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  dept_status?: string;
  /**
   * 更新者
   */
  dept_updateBy?: string;
  /**
   * 更新时间
   */
  dept_updateTime?: string;
  /**
   * 部门ID
   */
  deptId?: number;
  /**
   * 用户邮箱
   */
  email?: string;
  /**
   * 最后登录时间
   */
  loginDate?: string;
  /**
   * 最后登录IP
   */
  loginIp?: string;
  /**
   * 用户名称
   */
  nickName?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 手机号码
   */
  phonenumber?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 
   */
  roleId?: number;
  /**
   * 
   */
  roleIds?: Array<string>;
  /**
   * 
   */
  roles_0_admin?: string;
  /**
   * 创建者
   */
  roles_0_createBy?: string;
  /**
   * 创建时间
   */
  roles_0_createTime?: string;
  /**
   * 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
   */
  roles_0_dataScope?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  roles_0_delFlag?: string;
  /**
   * 部门树选择项是否关联显示
   */
  roles_0_deptCheckStrictly?: string;
  /**
   * 
   */
  roles_0_deptIds?: Array<string>;
  /**
   * 
   */
  roles_0_flag?: string;
  /**
   * 菜单树选择项是否关联显示
   */
  roles_0_menuCheckStrictly?: string;
  /**
   * 
   */
  roles_0_menuIds?: Array<string>;
  /**
   * 
   */
  roles_0_permissions?: Array<string>;
  /**
   * 备注
   */
  roles_0_remark?: string;
  /**
   * 角色ID
   */
  roles_0_roleId?: number;
  /**
   * 角色编码
   */
  roles_0_roleKey?: string;
  /**
   * 角色名称
   */
  roles_0_roleName?: string;
  /**
   * 显示顺序
   */
  roles_0_roleSort?: number;
  /**
   * 角色状态（0正常 1停用）
   */
  roles_0_status?: string;
  /**
   * 更新者
   */
  roles_0_updateBy?: string;
  /**
   * 更新时间
   */
  roles_0_updateTime?: string;
  /**
   * 用户性别（0男 1女 2未知）
   */
  sex?: string;
  /**
   * 帐号状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 用户账号
   */
  userName?: string;
  /**
   * 用户类型（00系统用户）
   */
  userType?: string;
}
/**
  * @description getInfoUsingGET5参数
  * @property `userId` userId
  */
export interface ParamsgetInfoUsingGET5 {
  // pathParams
  /**
   * userId
   */
  userId: number;
}
/**
  * @description importDataUsingPOST参数
  * @property `[updateSupport]` updateSupport
  */
export interface ParamsimportDataUsingPOST {
  // queryParams
  /**
   * updateSupport
   */
  updateSupport?: string;
}
/**
  * @description infoUsingGET参数
  * @property `username` username
  */
export interface ParamsinfoUsingGET {
  // pathParams
  /**
   * username
   */
  username: string;
}
/**
  * @description insertAuthRoleUsingPUT参数
  * @property `[roleIds]` roleIds
  * @property `[userId]` userId
  */
export interface ParamsinsertAuthRoleUsingPUT {
  // queryParams
  /**
   * roleIds
   */
  roleIds?: Array<string>;
  /**
   * userId
   */
  userId?: number;
}
/**
  * @description listUsingGET3参数
  * @property `[admin]` 
  * @property `[avatar]` 头像地址
  * @property `[createBy]` 创建者
  * @property `[createTime]` 创建时间
  * @property `[delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_ancestors]` 祖级列表
  * @property `[dept_createBy]` 创建者
  * @property `[dept_createTime]` 创建时间
  * @property `[dept_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[dept_deptId]` 部门id
  * @property `[dept_deptName]` 部门名称
  * @property `[dept_email]` 邮箱
  * @property `[dept_leaderId]` 负责人
  * @property `[dept_orderNum]` 显示顺序
  * @property `[dept_parentId]` 父部门id
  * @property `[dept_parentName]` 父部门名称
  * @property `[dept_phone]` 联系电话
  * @property `[dept_status]` 部门状态（0正常 1停用）
  * @property `[dept_updateBy]` 更新者
  * @property `[dept_updateTime]` 更新时间
  * @property `[deptId]` 部门ID
  * @property `[email]` 用户邮箱
  * @property `[loginDate]` 最后登录时间
  * @property `[loginIp]` 最后登录IP
  * @property `[nickName]` 用户名称
  * @property `[password]` 密码
  * @property `[phonenumber]` 手机号码
  * @property `[remark]` 备注
  * @property `[roleId]` 
  * @property `[roleIds]` 
  * @property `[roles_0_admin]` 
  * @property `[roles_0_createBy]` 创建者
  * @property `[roles_0_createTime]` 创建时间
  * @property `[roles_0_dataScope]` 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  * @property `[roles_0_delFlag]` 删除标志（0代表存在 2代表删除）
  * @property `[roles_0_deptCheckStrictly]` 部门树选择项是否关联显示
  * @property `[roles_0_deptIds]` 
  * @property `[roles_0_flag]` 
  * @property `[roles_0_menuCheckStrictly]` 菜单树选择项是否关联显示
  * @property `[roles_0_menuIds]` 
  * @property `[roles_0_permissions]` 
  * @property `[roles_0_remark]` 备注
  * @property `[roles_0_roleId]` 角色ID
  * @property `[roles_0_roleKey]` 角色编码
  * @property `[roles_0_roleName]` 角色名称
  * @property `[roles_0_roleSort]` 显示顺序
  * @property `[roles_0_status]` 角色状态（0正常 1停用）
  * @property `[roles_0_updateBy]` 更新者
  * @property `[roles_0_updateTime]` 更新时间
  * @property `[sex]` 用户性别（0男 1女 2未知）
  * @property `[status]` 帐号状态（0正常 1停用）
  * @property `[updateBy]` 更新者
  * @property `[updateTime]` 更新时间
  * @property `[userId]` 用户ID
  * @property `[userName]` 用户账号
  * @property `[userType]` 用户类型（00系统用户）
  */
export interface ParamslistUsingGET3 {
  // queryParams
  /**
   * 
   */
  admin?: string;
  /**
   * 头像地址
   */
  avatar?: string;
  /**
   * 创建者
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  delFlag?: string;
  /**
   * 祖级列表
   */
  dept_ancestors?: string;
  /**
   * 创建者
   */
  dept_createBy?: string;
  /**
   * 创建时间
   */
  dept_createTime?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  dept_delFlag?: string;
  /**
   * 部门id
   */
  dept_deptId?: number;
  /**
   * 部门名称
   */
  dept_deptName?: string;
  /**
   * 邮箱
   */
  dept_email?: string;
  /**
   * 负责人
   */
  dept_leaderId?: number;
  /**
   * 显示顺序
   */
  dept_orderNum?: number;
  /**
   * 父部门id
   */
  dept_parentId?: number;
  /**
   * 父部门名称
   */
  dept_parentName?: string;
  /**
   * 联系电话
   */
  dept_phone?: string;
  /**
   * 部门状态（0正常 1停用）
   */
  dept_status?: string;
  /**
   * 更新者
   */
  dept_updateBy?: string;
  /**
   * 更新时间
   */
  dept_updateTime?: string;
  /**
   * 部门ID
   */
  deptId?: number;
  /**
   * 用户邮箱
   */
  email?: string;
  /**
   * 最后登录时间
   */
  loginDate?: string;
  /**
   * 最后登录IP
   */
  loginIp?: string;
  /**
   * 用户名称
   */
  nickName?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 手机号码
   */
  phonenumber?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 
   */
  roleId?: number;
  /**
   * 
   */
  roleIds?: Array<string>;
  /**
   * 
   */
  roles_0_admin?: string;
  /**
   * 创建者
   */
  roles_0_createBy?: string;
  /**
   * 创建时间
   */
  roles_0_createTime?: string;
  /**
   * 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
   */
  roles_0_dataScope?: string;
  /**
   * 删除标志（0代表存在 2代表删除）
   */
  roles_0_delFlag?: string;
  /**
   * 部门树选择项是否关联显示
   */
  roles_0_deptCheckStrictly?: string;
  /**
   * 
   */
  roles_0_deptIds?: Array<string>;
  /**
   * 
   */
  roles_0_flag?: string;
  /**
   * 菜单树选择项是否关联显示
   */
  roles_0_menuCheckStrictly?: string;
  /**
   * 
   */
  roles_0_menuIds?: Array<string>;
  /**
   * 
   */
  roles_0_permissions?: Array<string>;
  /**
   * 备注
   */
  roles_0_remark?: string;
  /**
   * 角色ID
   */
  roles_0_roleId?: number;
  /**
   * 角色编码
   */
  roles_0_roleKey?: string;
  /**
   * 角色名称
   */
  roles_0_roleName?: string;
  /**
   * 显示顺序
   */
  roles_0_roleSort?: number;
  /**
   * 角色状态（0正常 1停用）
   */
  roles_0_status?: string;
  /**
   * 更新者
   */
  roles_0_updateBy?: string;
  /**
   * 更新时间
   */
  roles_0_updateTime?: string;
  /**
   * 用户性别（0男 1女 2未知）
   */
  sex?: string;
  /**
   * 帐号状态（0正常 1停用）
   */
  status?: string;
  /**
   * 更新者
   */
  updateBy?: string;
  /**
   * 更新时间
   */
  updateTime?: string;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 用户账号
   */
  userName?: string;
  /**
   * 用户类型（00系统用户）
   */
  userType?: string;
}
/**
  */
export type ParamsBodyregisterUsingPOST = models.SysUserReq;
/**
  * @description removeUsingDELETE3参数
  * @property `userIds` userIds
  */
export interface ParamsremoveUsingDELETE3 {
  // pathParams
  /**
   * userIds
   */
  userIds: string;
}
/**
  */
export type ParamsBodyresetPwdUsingPUT = models.SysUserReq;

export class SysUserControllerApi {
  protected $basePath = ''.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary add
   
   * @param data: ParamsBodyaddUsingPOST3
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public addUsingPOST3 = (
    
    data: ParamsBodyaddUsingPOST3,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary authRole
   * @param params ParamsauthRoleUsingGET
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public authRoleUsingGET = (
    params: ParamsauthRoleUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    userId,
} = params;
    const url = this.$basePath + `/user/authRole/${userId}`;
    const p: any = {};
    ajax.check(params.userId, 'userId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary changeStatus
   
   * @param data: ParamsBodychangeStatusUsingPUT1
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public changeStatusUsingPUT1 = (
    
    data: ParamsBodychangeStatusUsingPUT1,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/changeStatus`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary deptTree
   * @param params ParamsdeptTreeUsingGET1
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public deptTreeUsingGET1 = (
    params: ParamsdeptTreeUsingGET1,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/deptTree`;
    const p: any = {};
    p.query = {};
    if ('ancestors' in params) p.query.ancestors = params.ancestors;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('deptName' in params) p.query.deptName = params.deptName;
    if ('email' in params) p.query.email = params.email;
    if ('leaderId' in params) p.query.leaderId = params.leaderId;
    if ('orderNum' in params) p.query.orderNum = params.orderNum;
    if ('parentId' in params) p.query.parentId = params.parentId;
    if ('parentName' in params) p.query.parentName = params.parentName;
    if ('phone' in params) p.query.phone = params.phone;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary edit
   
   * @param data: ParamsBodyeditUsingPUT3
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public editUsingPUT3 = (
    
    data: ParamsBodyeditUsingPUT3,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary export
   * @param params ParamsexportUsingPOST
   
   * @param opt ajax config
   * @returns any
   */
  public exportUsingPOST = (
    params: ParamsexportUsingPOST,
    opt?: ExtraFetchParams
  ) : AjaxPromise<any>  => {
    const url = this.$basePath + `/user/export`;
    const p: any = {};
    p.query = {};
    if ('admin' in params) p.query.admin = params.admin;
    if ('avatar' in params) p.query.avatar = params.avatar;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('dept_ancestors' in params) p.query.dept_ancestors = params.dept_ancestors;
    if ('dept_createBy' in params) p.query.dept_createBy = params.dept_createBy;
    if ('dept_createTime' in params) p.query.dept_createTime = params.dept_createTime;
    if ('dept_delFlag' in params) p.query.dept_delFlag = params.dept_delFlag;
    if ('dept_deptId' in params) p.query.dept_deptId = params.dept_deptId;
    if ('dept_deptName' in params) p.query.dept_deptName = params.dept_deptName;
    if ('dept_email' in params) p.query.dept_email = params.dept_email;
    if ('dept_leaderId' in params) p.query.dept_leaderId = params.dept_leaderId;
    if ('dept_orderNum' in params) p.query.dept_orderNum = params.dept_orderNum;
    if ('dept_parentId' in params) p.query.dept_parentId = params.dept_parentId;
    if ('dept_parentName' in params) p.query.dept_parentName = params.dept_parentName;
    if ('dept_phone' in params) p.query.dept_phone = params.dept_phone;
    if ('dept_status' in params) p.query.dept_status = params.dept_status;
    if ('dept_updateBy' in params) p.query.dept_updateBy = params.dept_updateBy;
    if ('dept_updateTime' in params) p.query.dept_updateTime = params.dept_updateTime;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('email' in params) p.query.email = params.email;
    if ('loginDate' in params) p.query.loginDate = params.loginDate;
    if ('loginIp' in params) p.query.loginIp = params.loginIp;
    if ('nickName' in params) p.query.nickName = params.nickName;
    if ('password' in params) p.query.password = params.password;
    if ('phonenumber' in params) p.query.phonenumber = params.phonenumber;
    if ('remark' in params) p.query.remark = params.remark;
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('roleIds' in params) p.query.roleIds = params.roleIds;
    if ('roles_0_admin' in params) p.query.roles_0_admin = params.roles_0_admin;
    if ('roles_0_createBy' in params) p.query.roles_0_createBy = params.roles_0_createBy;
    if ('roles_0_createTime' in params) p.query.roles_0_createTime = params.roles_0_createTime;
    if ('roles_0_dataScope' in params) p.query.roles_0_dataScope = params.roles_0_dataScope;
    if ('roles_0_delFlag' in params) p.query.roles_0_delFlag = params.roles_0_delFlag;
    if ('roles_0_deptCheckStrictly' in params) p.query.roles_0_deptCheckStrictly = params.roles_0_deptCheckStrictly;
    if ('roles_0_deptIds' in params) p.query.roles_0_deptIds = params.roles_0_deptIds;
    if ('roles_0_flag' in params) p.query.roles_0_flag = params.roles_0_flag;
    if ('roles_0_menuCheckStrictly' in params) p.query.roles_0_menuCheckStrictly = params.roles_0_menuCheckStrictly;
    if ('roles_0_menuIds' in params) p.query.roles_0_menuIds = params.roles_0_menuIds;
    if ('roles_0_permissions' in params) p.query.roles_0_permissions = params.roles_0_permissions;
    if ('roles_0_remark' in params) p.query.roles_0_remark = params.roles_0_remark;
    if ('roles_0_roleId' in params) p.query.roles_0_roleId = params.roles_0_roleId;
    if ('roles_0_roleKey' in params) p.query.roles_0_roleKey = params.roles_0_roleKey;
    if ('roles_0_roleName' in params) p.query.roles_0_roleName = params.roles_0_roleName;
    if ('roles_0_roleSort' in params) p.query.roles_0_roleSort = params.roles_0_roleSort;
    if ('roles_0_status' in params) p.query.roles_0_status = params.roles_0_status;
    if ('roles_0_updateBy' in params) p.query.roles_0_updateBy = params.roles_0_updateBy;
    if ('roles_0_updateTime' in params) p.query.roles_0_updateTime = params.roles_0_updateTime;
    if ('sex' in params) p.query.sex = params.sex;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    if ('userId' in params) p.query.userId = params.userId;
    if ('userName' in params) p.query.userName = params.userName;
    if ('userType' in params) p.query.userType = params.userType;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary getInfo
   
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public getInfoUsingGET3 = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/getInfo`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary getInfo
   
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public getInfoUsingGET4 = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary getInfo
   * @param params ParamsgetInfoUsingGET5
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public getInfoUsingGET5 = (
    params: ParamsgetInfoUsingGET5,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    userId,
} = params;
    const url = this.$basePath + `/user/${userId}`;
    const p: any = {};
    ajax.check(params.userId, 'userId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary importData
   * @param params ParamsimportDataUsingPOST
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public importDataUsingPOST = (
    params: ParamsimportDataUsingPOST,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/importData`;
    const p: any = {};
    p.query = {};
    if ('updateSupport' in params) p.query.updateSupport = params.updateSupport;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary importTemplate
   
   
   * @param opt ajax config
   * @returns any
   */
  public importTemplateUsingPOST = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<any>  => {
    const url = this.$basePath + `/user/importTemplate`;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary info
   * @param params ParamsinfoUsingGET
   
   * @param opt ajax config
   * @returns models.RC2ABLoginUserC2BB
   */
  public infoUsingGET = (
    params: ParamsinfoUsingGET,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.RC2ABLoginUserC2BB>  => {
    const {
    username,
} = params;
    const url = this.$basePath + `/user/info/${username}`;
    const p: any = {};
    ajax.check(params.username, 'username');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary insertAuthRole
   * @param params ParamsinsertAuthRoleUsingPUT
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public insertAuthRoleUsingPUT = (
    params: ParamsinsertAuthRoleUsingPUT,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/authRole`;
    const p: any = {};
    p.query = {};
    if ('roleIds' in params) p.query.roleIds = params.roleIds;
    if ('userId' in params) p.query.userId = params.userId;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary list
   * @param params ParamslistUsingGET3
   
   * @param opt ajax config
   * @returns models.TableDataInfo
   */
  public listUsingGET3 = (
    params: ParamslistUsingGET3,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.TableDataInfo>  => {
    const url = this.$basePath + `/user/list`;
    const p: any = {};
    p.query = {};
    if ('admin' in params) p.query.admin = params.admin;
    if ('avatar' in params) p.query.avatar = params.avatar;
    if ('createBy' in params) p.query.createBy = params.createBy;
    if ('createTime' in params) p.query.createTime = params.createTime;
    if ('delFlag' in params) p.query.delFlag = params.delFlag;
    if ('dept_ancestors' in params) p.query.dept_ancestors = params.dept_ancestors;
    if ('dept_createBy' in params) p.query.dept_createBy = params.dept_createBy;
    if ('dept_createTime' in params) p.query.dept_createTime = params.dept_createTime;
    if ('dept_delFlag' in params) p.query.dept_delFlag = params.dept_delFlag;
    if ('dept_deptId' in params) p.query.dept_deptId = params.dept_deptId;
    if ('dept_deptName' in params) p.query.dept_deptName = params.dept_deptName;
    if ('dept_email' in params) p.query.dept_email = params.dept_email;
    if ('dept_leaderId' in params) p.query.dept_leaderId = params.dept_leaderId;
    if ('dept_orderNum' in params) p.query.dept_orderNum = params.dept_orderNum;
    if ('dept_parentId' in params) p.query.dept_parentId = params.dept_parentId;
    if ('dept_parentName' in params) p.query.dept_parentName = params.dept_parentName;
    if ('dept_phone' in params) p.query.dept_phone = params.dept_phone;
    if ('dept_status' in params) p.query.dept_status = params.dept_status;
    if ('dept_updateBy' in params) p.query.dept_updateBy = params.dept_updateBy;
    if ('dept_updateTime' in params) p.query.dept_updateTime = params.dept_updateTime;
    if ('deptId' in params) p.query.deptId = params.deptId;
    if ('email' in params) p.query.email = params.email;
    if ('loginDate' in params) p.query.loginDate = params.loginDate;
    if ('loginIp' in params) p.query.loginIp = params.loginIp;
    if ('nickName' in params) p.query.nickName = params.nickName;
    if ('password' in params) p.query.password = params.password;
    if ('phonenumber' in params) p.query.phonenumber = params.phonenumber;
    if ('remark' in params) p.query.remark = params.remark;
    if ('roleId' in params) p.query.roleId = params.roleId;
    if ('roleIds' in params) p.query.roleIds = params.roleIds;
    if ('roles_0_admin' in params) p.query.roles_0_admin = params.roles_0_admin;
    if ('roles_0_createBy' in params) p.query.roles_0_createBy = params.roles_0_createBy;
    if ('roles_0_createTime' in params) p.query.roles_0_createTime = params.roles_0_createTime;
    if ('roles_0_dataScope' in params) p.query.roles_0_dataScope = params.roles_0_dataScope;
    if ('roles_0_delFlag' in params) p.query.roles_0_delFlag = params.roles_0_delFlag;
    if ('roles_0_deptCheckStrictly' in params) p.query.roles_0_deptCheckStrictly = params.roles_0_deptCheckStrictly;
    if ('roles_0_deptIds' in params) p.query.roles_0_deptIds = params.roles_0_deptIds;
    if ('roles_0_flag' in params) p.query.roles_0_flag = params.roles_0_flag;
    if ('roles_0_menuCheckStrictly' in params) p.query.roles_0_menuCheckStrictly = params.roles_0_menuCheckStrictly;
    if ('roles_0_menuIds' in params) p.query.roles_0_menuIds = params.roles_0_menuIds;
    if ('roles_0_permissions' in params) p.query.roles_0_permissions = params.roles_0_permissions;
    if ('roles_0_remark' in params) p.query.roles_0_remark = params.roles_0_remark;
    if ('roles_0_roleId' in params) p.query.roles_0_roleId = params.roles_0_roleId;
    if ('roles_0_roleKey' in params) p.query.roles_0_roleKey = params.roles_0_roleKey;
    if ('roles_0_roleName' in params) p.query.roles_0_roleName = params.roles_0_roleName;
    if ('roles_0_roleSort' in params) p.query.roles_0_roleSort = params.roles_0_roleSort;
    if ('roles_0_status' in params) p.query.roles_0_status = params.roles_0_status;
    if ('roles_0_updateBy' in params) p.query.roles_0_updateBy = params.roles_0_updateBy;
    if ('roles_0_updateTime' in params) p.query.roles_0_updateTime = params.roles_0_updateTime;
    if ('sex' in params) p.query.sex = params.sex;
    if ('status' in params) p.query.status = params.status;
    if ('updateBy' in params) p.query.updateBy = params.updateBy;
    if ('updateTime' in params) p.query.updateTime = params.updateTime;
    if ('userId' in params) p.query.userId = params.userId;
    if ('userName' in params) p.query.userName = params.userName;
    if ('userType' in params) p.query.userType = params.userType;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary register
   
   * @param data: ParamsBodyregisterUsingPOST
   * @param opt ajax config
   * @returns models.RC2ABbooleanC2BB
   */
  public registerUsingPOST = (
    
    data: ParamsBodyregisterUsingPOST,opt?: ExtraFetchParams
  ) : AjaxPromise<models.RC2ABbooleanC2BB>  => {
    const url = this.$basePath + `/user/register`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary remove
   * @param params ParamsremoveUsingDELETE3
   
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public removeUsingDELETE3 = (
    params: ParamsremoveUsingDELETE3,
    opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const {
    userIds,
} = params;
    const url = this.$basePath + `/user/${userIds}`;
    const p: any = {};
    ajax.check(params.userIds, 'userIds');
    return ajax.ajax({
      ...opt,
      method: 'DELETE',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary resetPwd
   
   * @param data: ParamsBodyresetPwdUsingPUT
   * @param opt ajax config
   * @returns { [key: string]: any; }
   */
  public resetPwdUsingPUT = (
    
    data: ParamsBodyresetPwdUsingPUT,opt?: ExtraFetchParams
  ) : AjaxPromise<{ [key: string]: any; }>  => {
    const url = this.$basePath + `/user/resetPwd`;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    });
  }
}

export default new SysUserControllerApi();